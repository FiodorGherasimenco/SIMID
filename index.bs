<pre class='metadata'>
Title: Secure Interface for Video Interactive Creative (SIVIC)
Shortname: SIVIC
Level: 1
Status: LS
Group: IAB
URL: https://interactiveadvertisingbureau.github.io/SIVIC/
Repository: InteractiveAdvertisingBureau/SIVIC
Editor: Pieter Mees, Zentrick, pieter.mees@zentrick.com
Abstract: Establishes a common communication protocol between video players and executable ad units, providing rich ad experiences for viewers.
Markup Shorthands: markdown yes, idl yes, dfn yes, markup yes
Inline Github Issues: title
</pre>

# Version # {#version-number}
0.1

# Executive Summary # {#exec-summary}

SIVIC is a standard for providing rich interactivity in the context of
streaming audio and video ads. While the VAST standard addresses how publishers
discover various metadata assets related to an ad campaign, SIVIC addresses
how the publisher’s video player should communicate and interface with a rich
interactive layer and vice versa. As such, one can think of the SIVIC creative
as one of the assets listed in a VAST document.

A main tenet of SIVIC is the separation of the interactive layer from the media
asset. This clear separation allows publisher players to be in control of their
streams and enables use cases such as server-side ad insertion (SSAI), as well
as live streaming.

SIVIC was built with strong security from the ground up, and is designed to be
sandboxed from the media player, providing peace of mind to publishers when
serving ads from third party services. SIVIC aims to provide the tools and
controls to allow creatives to offer rich augmented user experiences while
degrading gracefully if certain features are not supported.

<img width="100%" src="images/sivic_overlay.png" alt="A diagram showing SIVIC ads sandboxed from the publisher player environment.">
A diagram showing SIVIC ads sandboxed from the publisher player environment

SIVIC is part of a broader effort to replace the older VPAID standard. While
OMID replaces the use case of verification and measurement, SIVIC replaces
the use case of interactive streaming media ads, the original intended purpose
of the VPAID standard. SIVIC provides a path for VPAID deprecation and allows
the industry to move to more secure and transparent standards. SIVIC aims to
gain broad industry adoption by ensuring that the standard is focused on the
primary use case of interactivity.

## SIVIC vs. VPAID Comparison ## {#sivic-vs-vpaid}

<img width="100%" src="images/sivic_vs_vpaid.png" alt="A diagram showing the difference between SIVIC and VPAID security.">
<style>
  table.alternatecolor tr:nth-child(odd) {
    background: #CCCCCC;
    vertical-align: top;
  }
</style>
<table class="alternatecolor">
  <tbody>
    <tr style="background:black;color:white">
      <td width="20%">Feature</td>
      <td width="40%" colspan="1" rowspan="1">VPAID</td>
      <td width="40%">SIVIC</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Resource nature</td>
      <td colspan="1" rowspan="1">JavaScript file with MIME type application/javascript.</td>
      <td colspan="1" rowspan="1">HTML file with MIME typetext/html.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Security</td>
      <td colspan="1" rowspan="1">Creative directly accesses player DOM.</td>
      <td colspan="1" rowspan="1">Strictly sandboxed into a cross-origin iframe.</td>
    </tr>
    <tr class="c13">
      <td colspan="1" rowspan="1">Video asset management</td>
      <td colspan="1" rowspan="1">Creative manages media playback.</td>
      <td colspan="1" rowspan="1">Player manages media playback.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Pre-caching</td>
      <td colspan="1" rowspan="1">Only the VPAID script can be reliably pre-cached. Video asset cannot be pre-cached.</td>
      <td colspan="1" rowspan="1">Video and interactive overlay can be pre-cached.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Errors influence on performance</td>
      <td colspan="1" rowspan="1">Possible site-wide fatal errors can result in significant publisher site performance deterioration.</td>
      <td colspan="1" rowspan="1">Internal creative errors do not affect player DOM, directly. Risks are limited to interactive component performance only.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">SSAI feasibility</td>
      <td colspan="1" rowspan="1">SSAI is not possible.</td>
      <td rowspan="1">Interactive creatives can be rendered in SSAI context.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Latencies</td>
      <td colspan="1" rowspan="1">Publishers are at the mercy of VPAID creative implementation efficiency and background processes (verification, trading, wrapping, etc.) Each of these characteristics imposes great latencies.</td>
      <td colspan="1" rowspan="1">Players can pre-load video and creative assets due to having full control over decisioning and displaying the creative. Ad decisioning latency is removed.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">API</td>
      <td colspan="1" rowspan="1">Both player and creative must support specific javascript functions.</td>
      <td colspan="1" rowspan="1">Utilizes native to browsers postMessage API. No custom functions participate in player vs. creative relationships. Player and creative communicate via exchanging of messages based on special protocol.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Ad blocking</td>
      <td colspan="1" rowspan="1">VPAID can prevent an ad from rendering.</td>
      <td colspan="1" rowspan="1">SIVIC is built for interactivity and was not designed for ad blocking. The Open Measurement SDK has plans to support this capability in the future. </td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Verification services</td>
      <td colspan="1" rowspan="1">Verification features can be fully engaged by VPAID scripts.</td>
      <td colspan="1" rowspan="1">SIVIC cannot access elements outside of the secure environment and is unable to handle any verification use cases. OMID handles the use case for verification allowing SIVIC to be focused on interactivity only.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Creative wrapping</td>
      <td colspan="1" rowspan="1">VPAID ads can load other ads (including other VPAID ads).</td>
      <td colspan="1" rowspan="1">Cannot be executed.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Audio advertising</td>
      <td colspan="1" rowspan="1">Out of standard scope.</td>
      <td colspan="1" rowspan="1">Enables interactive components serving with audio ads.</td>
    </tr>
    <tr>
      <td colspan="1" rowspan="1">Environment constraints</td>
      <td colspan="1" rowspan="1">Player must be an HTML video element.</td>
      <td colspan="1" rowspan="1">Player can be native or web so long as the SIVIC creative has sandboxed DOM access like in a web view.</td>
    </tr>
  </tbody>
</table>

## Intended Audience ## {#intended-audience}

The SIVIC standard specification is geared toward the digital media
(video/audio) advertising community. Anyone who is involved can benefit
from reading the introductory sections. The API and implementation details
sections are predominantly targeted to engineers developing ad creation
or serving products with SIVIC interactivity.


# Introduction # {#intro}

Throughout this document, the SIVIC interactive component is referred
as a “SIVIC creative” or “creative”.

Unless otherwise noted, all features that are discussed in this standard are
required unless otherwise noted. Standard RFC language will be used.
See <a href="https://tools.ietf.org/html/rfc2119">https://tools.ietf.org/html/rfc2119</a>
for RFC 2119 for enforcement terminology used in this standard.

## SIVIC Interactive Creative Nature ## {#sivic-interactive-creative-nature}

<img width="100%" src="images/sivic_assets.png" alt="A diagram showing SIVIC where and how sivic video and html assets load.">

The SIVIC creative portion is described in the VAST <InteractiveCreativeFile/>
node as a URL to an HTML resource with MIME type text/html. 

Example:
```
<MediaFiles>
<MediaFile …>https://example.com/mediafile.mp4</MediaFile>
<InteractiveCreativeFile type="text/html" apiFramework="SIVIC" variableDuration="true">
   	<![CDATA[https://adserver.com/ads/creative.html]]>
</InteractiveCreativeFile>
</MediaFiles>
```

Because the creative is an HTML resource that originates in the advertiser’s
domain, interactive component loading entails creating a cross-origin iframe.
This means bi-directional communication between the player and creative
requires using the postMessage API. This, in turn, means that all
communication between player and creative is asynchronous.

## SIVIC Ad Serving Flow ## {#video-ad-flow}

The SIVIC ad experience is delivered by concurrently rendering
the streaming media and the interactive creative. The player obtains
both media and creative data from VAST 4.x, loads the resources, assembles
the ad, and ensures a cohesive ad experience.

Diagram below illustrates resources loading and ad compilation.
<img width="100%" src="images/sivic_resource_loading.png" alt="Diagram illustrates resources loading and ad compilation.">

## Player and Creative Communication ## {#player-creative-communication}

Player and SIVIC creative communicate by sending bidirectional messages over
the standard postMessage API. SIVIC API requirements govern message construction
conventions as well as the message data structure.

See sections [[#msg-proto]], [[#api]].

## Scope and Limitation ## {#scope}

The use of HTML is only required for the SIVIC creative, not the publisher
property hosting that creative. As long as the publisher can load HTML and
communicate with it over the standard postMessage interface, it can support
SIVIC. In practice, this means that SIVIC can be hosted in web page iframes,
mobile app web views, and other platforms. 

Note that certain devices, including TV sets and OTT boxes, limit loading of
external assets, have limited HTML rendering capabilities or are unable to
overlay video and HTML. These devices are unable to support SIVIC.


SIVIC cannot be used to decide which media to show on the client
pre-impression. This is because the media file must be present alongside
the SIVIC creative and delivered via the VAST4 media file node. SIVIC should
not be set up to measure viewability.

Any use of the SIVIC spec to support something other than interactive or
dynamic content within the ad unit should be by default considered as counter
to the intentions of the spec.


# Messaging Protocol # {#msg-proto}

To facilitate asynchronous communication between the video player and the interactive creative, SIVIC employs a messaging protocol.

The protocol defines both the data structure of messages exchanged by both
parties and the algorithms needed to reliably handle the exchange of these
messages.

The protocol is designed to be easily implemented on top of the
{{Window/postMessage}} interface, available across <{iframe}> elements which are
used to isolate the SIVIC ad from the video player.

Issue: add link to final location of reference implementation


## Transport Layer

A <dfn for="message">transport</dfn> is a communication mechanism that can send
[=serialized messages=] between two parties. In SIVIC's case, those are the video
player and the creative.

A <dfn for="message">serialized message</dfn> is a text string that one of the
parties, the <dfn for="message">sender</dfn>, forwards to the other party, the
<dfn for="message">receiver</dfn>, through the [=message/transport=].

The [=message/transport=] must guarantee the following <dfn
for="message/transport">properties</dfn>:
- It must guarantee that both parties of the channel are unambiguously defined
	and that only those two parties observe any [=serialized messages=] sent by
	either of them.
- It must guarantee that all [=serialized messages=] eventually get delivered to
	the other party.
- It must guarantee that the [=serialized messages=] are delivered intact,
	without any modifications.
- It must guarantee that all [=serialized messages=] are delivered in the order
	that they were sent by the sender.

The [=message/transport=] is not required to deliver [=serialized messages=]
synchronously, but it must deliver them as soon as possible.

Note: This means that a [=message/sender=] can not assume that a message is
delivered to the [=message/receiver=] unless the [=message/receiver=] sends a
message back that acknowledges receipt. It also means that exceptions on the
[=message/receiver's=] side can't be caught by the [=message/sender=] unless
the [=message/receiver=] explicitly sends a message back to the
[=message/sender=] with the exception.

### {{Window/postMessage}} Transport

In SIVIC the media player and creative use the standard postMessage API to communicate across the cross-origin <{iframe}> boundary.

### Message Serialization ### {###msg-serialization}

To <dfn for="message">serialize</dfn> a {{Message}} to a [=serialized message=],
apply `JSON.stringify` to the {{Message}} data structure. The resulting
{{DOMString}} represents the [=serialized message=].

To <dfn for="message">deserialize</dfn> a [=serialized message=] to a
{{Message}} data structure, apply `JSON.parse` to the [=serialized message=].
The resulting object has the {{Message}} data structure.

The [=message/sender=] should not transmit any [=serialized messages=] that
cannot be correctly [=message/deserialized=] by the [=message/receiver=].

The [=message/receiver=] should discard and ignore any [=serialized messages=]
that it cannot correctly [=message/deserialize=].


## Session Layer

Multiple <dfn for="message">sessions</dfn> maybe active over a single
[=message/transport=] at any given time.

A [=message/session=] is uniquely identified by a <dfn for="message">session
identifier</dfn>. All messages belonging to a [=message/session=] *must*
reference the same [=message/session identifier=].

### Establishing a new session ### {#establish-session}

A [=message/session=] is established by running the [=establish a new session=]
algorithm.

<section algorithm="to establish a new session">

To <dfn for="message">establish a new session</dfn>, you *must* run the
following steps:

: Input
:: none
: Output
:: |sessionIdPromise|, a {{Promise}} that will resolve to a
	 [=session identifier=]

1. Let |sessionId| be a new [=session identifier=].

Advisement: It is recommended to use a UUID for the [=message/session
identifier=].

2. Let |type| be `createSession`.
3. Let |args| be `undefined`.
4. Let |sessionIdPromise| be a new unresolved {{Promise}}.
5. Start the [=send an acknowledgement message=] algorithm with |sessionId|, |type| and
	 |args|. Let |ackPromise| be the return value.
6. Return |sessionIdPromise|.
7. When |ackPromise| resolves:
	 - If it is fulfilled, then resolve |sessionIdPromise| with |sessionId|.
	 - If it is rejected with |error|, then reject |sessionIdPromise| with
		 |error|.

</section>

### Sending messages

To send a message through a [=message/session=], run the [=send a message=]
algorithm.

<section algorithm="to send a message">

To <dfn for="message">send a message</dfn>, you *must* run the following
steps synchronously:

: Input
:: |sessionId|, a [=session identifier=]
:: |type|, a [=message type=]
:: |args|, an optional object to be submitted with the message
: Output
:: |messageId|, a [=message identifier=]

1. Let |messageId| be
	 - `0`, if this is the first message in the [=message/session=] identified
		 by |sessionId|.
	 - |messageId| of the previous message sent on the [=message/session=]
		 identified by |sessionId| incremented by `1`, otherwise.
2. Let |timestamp| be the current number of milliseconds since January 1, 1970, 00:00:00 UTC (`Epoch` time).
3. Let |message| be a new {{Message}} object with its attributes initialized
	 to |sessionId|, |messageId|, |type|, |timestamp| and |args|.
4. Let |serializedMessage| be the result of running `JSON.stringify` on
	 |message|.
5. Transmit |serializedMessage| to the other party through the
	 [=message/transport=].
6. Return |messageId|.

</section>

While most messages can be sent "fire-and-forget", some require the sender to
be informed that they were properly received and handled by the receiver. The
protocol uses semantics similar to the {{Promise}} API for this.

<section algorithm="to send an acknowledgement message">

To <dfn for="message">send an acknowledgement message</dfn>, you *must* run the
following steps:

: Input
:: |sessionId|, a [=session identifier=]
:: |type|, a [=message type=]
:: |args|, an optional object to be submitted with the message
: Output
:: |promise|, a {{Promise}} which will eventually resolve to the value sent
	 back by the other party

1. Run the [=send a message=] algorithm with |sessionId|, |type| and |args|.
	 Let |messageId| be the return value.
2. Let |promise| be a new unresolved {{Promise}}.
3. Add |promise| to the [=resolve list=], annotated with |sessionId| and
	 |messageId|.
4. Return |promise|.

</section>

### Receiving messages

To be able to detect new incoming [=message/sessions=] and receive messages from
existing sessions, every party should start running the [=handle incoming
messages=] algorithm as soon as possible.

<section algorithm="to handle an incoming message">

To <dfn for="message">handle an incoming message</dfn>, you *must* run the
following steps:

: Input
:: |serializedMessage|, a [=serialized message=] received from the
	 [=message/transport=]
: Output
:: none

1. Let |message| be the result of running `JSON.parse` on
	 |serializedMessage|.
	 1. If `JSON.parse` threw an exception, ignore the exception and abort
			execution of this algorithm.
2. If |message|.{{Message/type}} is `resolve` or `reject`:
	 1. Let |sessionId| be |message|.{{Message/sessionId}}.
	 2. Let |messageId| be
			|message|.{{Message/args}}.{{ResolveMessageArgs/messageId}}.
	 3. Let |promise| be the promise in the [=resolve list=] for |sessionId|
			and |messageId|, if any.
	 4. If a |promise| was found:
			1. If |message|.{{Message/type}} is `resolve`, then fulfill |promise|
				 with |message|.{{Message/args}}.{{ResolveMessageArgs/value}}.
			2. If |message|.{{Message/type}} is `reject`, then reject |promise| with
				 |message|.{{Message/args}}.{{ResolveMessageArgs/value}}.
3. Otherwise: pass |message| to the user of the protocol for handling.

</section>

## Message Data Structure ## {##msg-struct}

A protocol message is represented by the {{Message}} data structure.

<xmp class="idl">
dictionary Message {
	required DOMString sessionId;
	required unsigned long messageId;
	required unsigned long timestamp;
	required DOMString type;
	any args;
};
</xmp>

A {{Message}} has an associated {{Message/sessionId}}, a string that uniquely
identifies the [=message/session=] to which the {{Message}} belongs.

A {{Message}} has an associated {{Message/messageId}}, an integer that
increments with each message sent by the sender over the [=message/session=]
specified by {{Message/sessionId}}.

Note: The combination of {{Message/sessionId}} and {{Message/messageId}}
uniquely identifies a single message. The combination of the values of these two
attributes may never occur twice.

A {{Message}} has {{Message/timestamp}} property. {{Message/timestamp}} is expressed in
a number of milliseconds since January 1, 1970, 00:00:00 UTC (`Epoch` time).
{{Message}} sender must set `timestamp` value as close as possible
to the moment the underlying process occurs. However, the `receiver` should not assume that `timestamp`
value reflects the exact instant {{Message}} triggering event chain was accomplished.

For example, if {{Message}} communicates ad video state change, media player sets {{Message/timestamp}} value to the moment the corresponding video event arrives from `HTMLVideoElement`.

A {{Message}} has an associated {{Message/type}}, a string that defines the type
of message that is being sent and informs the receiver how to interpret the
{{Message/args}} parameter.

A {{Message}} may have associated {{Message/args}}, which are
{{Message/type}}-specific additional arguments. The data structure and meaning
of {{Message/args}} is defined in the respective message type definitions.


### <dfn for="message">`resolve`</dfn> messages ### {###msg-proto-resolve}

{{Message/type}} must be `resolve`

{{Message/args}} must be a {{ResolveMessageArgs}} object:

<xmp class="idl">
dictionary ResolveMessageArgs {
	required unsigned long messageId;
	any value;
};
</xmp>

{{ResolveMessageArgs/messageId}} refers to the {{Message/messageId}} attribute
of the message that is being resolved.

{{ResolveMessageArgs/value}} may include a value associated with this `resolve`
message.

### <dfn for="message">`reject`</dfn> messages ### {###msg-proto-reject}

{{Message/type}} must be `reject`

{{Message/args}} must be a {{ResolveMessageArgs}} object.

{{ResolveMessageArgs/value}} may include an error message associated with this
`reject` message.

<xmp class="idl">
dictionary ResolveMessageArgsValue {
	unsigned long errorCode;
	DOMString message;
};
</xmp>

# API Reference # {#api}

## Reference Table ## {#reference-table}

<table class="alternatecolor">
  <tbody>
    <tr style="background:black;color:white">
      <td width="40%">API</td>
      <td width="30%">resolve</td>
      <td width="30%">reject</td>
    </tr>
    <tr>
      <td>[[#sivic-video-durationchange]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-ended]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-error]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-pause]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-play]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-playing]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-seeked]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-seeking]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-stalled]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-timeupdate]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-video-volumechange]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-adSkipped]]</td>
      <td>[[#sivic-player-adSkipped-resolve]]</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-adStopped]]</td>
      <td>[[#sivic-player-adStopped-resolve]]</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-fatalError]]</td>
      <td>[[#sivic-player-fatalError-resolve]]</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-init]]</td>
      <td>[[#sivic-player-init-resolve]]</td>
      <td>[[#sivic-player-init-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-player-log]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-resize]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-player-startCreative]]</td>
      <td>[[#sivic-player-startCreative-resolve]]</td>
      <td>[[#sivic-player-startCreative-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-clickThru]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-fatalError]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-getVideoState]]</td>
      <td>[[#sivic-creative-getVideoState-resolve]]</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-log]]</td>
      <td>n/a</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-reportTracking]]</td>
      <td>[[#sivic-creative-reportTracking-resolve]]</td>
      <td>[[#sivic-creative-reportTracking-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestChangeAdDuration]]</td>
      <td>[[#sivic-creative-requestChangeAdDuration-resolve]]</td>
      <td>[[#sivic-creative-requestChangeAdDuration-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestChangeVolume]]</td>
      <td>[[#sivic-creative-requestChangeVolume-resolve]]</td>
      <td>[[#sivic-creative-requestChangeVolume-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestFullScreen]]</td>
      <td>[[#sivic-creative-requestFullScreen-resolve]]</td>
      <td>[[#sivic-creative-requestFullScreen-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestPause]]</td>
      <td>[[#sivic-creative-requestPause-resolve]]</td>
      <td>[[#sivic-creative-requestPause-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestPlay]]</td>
      <td>[[#sivic-creative-requestPlay-resolve]]</td>
      <td>[[#sivic-creative-requestPlay-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestResize]]</td>
      <td>[[#sivic-creative-requestResize-resolve]]</td>
      <td>[[#sivic-creative-requestResize-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestSkip]]</td>
      <td>[[#sivic-creative-requestSkip-resolve]]</td>
      <td>[[#sivic-creative-requestSkip-reject]]</td>
    </tr>
    <tr>
      <td>[[#sivic-creative-requestStop]]</td>
      <td>[[#sivic-creative-requestStop-resolve]]</td>
      <td>[[#sivic-creative-requestStop-reject]]</td>
    </tr>
  </tbody>
</table>

## Messages triggered by video element events ## {#video-messages}

When video element that renders ad media dispatches events, player posts corresponding messages to SIVIC creative. Video element related messages include original media event type names. `Message.type` values are prepended with SIVIC:Video namespace.

Example:
1. Video element dispatches event `play`.
1. Player sends message to SIVIC creative with `Message.type = SIVIC:Video:play`.

Video messages should be reported immediately after player receives related event.

`Message.timestamp` property value is set to the time media element dispatches event.



### SIVIC:Video:durationchange ### {#sivic-video-durationchange}
Should be called after the durationchange event is triggered on the video element.

parameters:
- duration(float): The number in seconds of the video duration. For server side ad insertion this must be calculated
	to be the total duration of the ad.

### SIVIC:Video:ended ### {#sivic-video-ended}
Should be called after the ended event is triggered on the video element.

### SIVIC:Video:error ### {#sivic-video-error}
Should be called after the error event is triggered on the video element.

parameters:
- error(DOMString): corresponds to videoElement.error.code.
- message(DOMString): corresponds to videoElement.error.message.

### SIVIC:Video:pause ### {#sivic-video-pause}
Should be called after the pause event is triggered on the video element.

### SIVIC:Video:play ### {#sivic-video-play}
Should be called after the play event is triggered on the video element.

### SIVIC:Video:playing ### {#sivic-video-playing}
Should be called after the playing event is triggered on the video element.

### SIVIC:Video:seeked ### {#sivic-video-seeked}
Should be called after the seeked event is triggered on the video element.

### SIVIC:Video:seeking ### {#sivic-video-seeking}
Should be called after the seeking event is triggered on the video element.

### SIVIC:Video:stalled ### {#sivic-video-stalled}
Should be called after the stalled event is triggered on the video element.

### SIVIC:Video:timeupdate ### {#sivic-video-timeupdate}
Should be called after the timeupdate event is triggered on the video element.

parameters:
- currentTime(number): corresponds to videoElement.currentTime attribute. For server side ad insertion
	this must be calculated to be the total time the video ad has played. For example: if the video element
	time is 500 seconds but the ad started playback 10 seconds ago (in DAI), currentTime should be set to 10 seconds.

### SIVIC:Video:volumechange ### {#sivic-video-volumechange}
Should be called after the volumechange event is triggered on the video element.

parameters:
- volume(number): corresponds to videoElement.volume attribute.

## Messages from the player ## {#player-messages}
All messages from the player should be prepended with SIVIC:Player.

For example:

<xmp>
{
 id: "SIVIC:Player:adStopped",
 args: {
	 code: 0
 }
}
</xmp>

### SIVIC:Player:adSkipped ### {#sivic-player-adSkipped}
This indicates the player will skip the ad. The player should hide the creative and stop video playback in this case.
The player should wait for a response before unloading the creative iframe.

#### resolve #### {#sivic-player-adSkipped-resolve}
After resolve is called, the iframe will be removed.

### SIVIC:Player:adStopped ### {#sivic-player-adStopped}
This indicates the player will stop the ad. The player should hide the creative and stop video playback in this case.
The player should wait for a response before unloading the creative iframe.

parameters:
- code(int): reason for ad stopping

The player should use the following table to determine which code to send.
 - 0: Unspecified
 - 1: User initiated close
 - 2: Ad media playback complete
 - 3: Player initiating close before media playback complete
 - 4: Creative initiated close

#### resolve #### {#sivic-player-adStopped-resolve}
After resolve is called, the iframe will be removed.

### SIVIC:Player:fatalError ### {#sivic-player-fatalError}
The player has encountered a fatal error that will cause ad playback to stop. The player should stop video playback if
possible. Regardless of if playback is stopped the player should hide the creative and try to wait for a response
before unloading the creative iframe.

- errorCode(int): reason for error. See [[#error-codes]]
- errorMessage(DOMString): Any additional information.

#### resolve #### {#sivic-player-fatalError-resolve}
After resolve is called, the iframe will be removed.

### SIVIC:Player:init ### {#sivic-player-init}

To assist in preloading assets the player must send the SIVIC:Player:init message
before SIVIC:Player:startCreative.  The player should send this message early
enough before playback so that assets can be displayed as soon as the ad starts.

The ad, however, should not assume it is given any amount of time between the
SIVIC:Player:init message and the SIVIC:Player:startCreative message.
For example a preroll might send SIVIC:Player:startCreative immediately
after SIVIC:Player:init.

With SIVIC:Player:init, the player shall provide the following parameters:

<xmp class="idl">
dictionary InitParameters {
	required EnvironmentData environmentData;
	required CreativeData creativeData;
};
</xmp>
<xmp class="idl">
dictionary CreativeData {
	required DOMString adParameters;
	DOMString adId;
	DOMString creativeId;
	DOMString adServingId;
	DOMString clickThruUrl;
};
</xmp>
<xmp class="idl">
dictionary EnvironmentData {
	required VideoDimensions videoDimensions;
	required CreativeDimensions creativeDimensions;
	required boolean fullScreen;
	required boolean fullscreenAllowed;
	required boolean variableDurationAllowed;
	required SkippableState skippableState;
	required DOMString version;
	DOMString siteUrl;
	DOMString appId;
	DOMString useragent;
	DOMString deviceId;
	boolean muted;
	float volume;
};

enum SkippableState {"playerHandles", "adHandles", "notSkippable"};
</xmp>


- {{CreativeData}} is used to pass information associated
	with the creative (sometimes taken from VAST). In a VAST context, the ad unit
	should pass the value for either the `Linear` or `Nonlinear` `AdParameter`
	element specified in the VAST document.
		- {{CreativeData/adParameters}} ad parameters from VAST, or an empty string
			if unknown.
		- {{CreativeData/adId}} the ID of the ad from VAST, or an empty string if
			unknown.
		- {{CreativeData/creativeId}} the ID from the creative or an empty string
			if unknown.
		- {{CreativeData/adServingId}} Quasi-unique id generated by ad server and
			passed through all 1st and 3rd party reporting to facilitate the marriage
			of impression-level data across multiple reporting systems. In VAST 4.1
			and later this id is provided in the `AdServingID` node.
		- {{CreativeData/clickThruUrl}} The click through url, provided from VAST.
			If there is no click through url this should be an empty string.


- {{EnvironmentData}} is used to pass information associated with the
	publisher playback environment.
	The object should have the following fields.
		- {{EnvironmentData/videoDimensions}} indicates the video display area, see [[#sivic-player-resize]]
		- {{EnvironmentData/creativeDimensions}} indicates the creative display
			area, see [[#sivic-player-resize]]
		- {{EnvironmentData/fullScreen}} True if fullscreen.
		- {{EnvironmentData/fullscreenAllowed}}: True if the creative may choose
			to display or not display a fullscreen option
		- {{EnvironmentData/variableDurationAllowed}}: If set to true the player
			must allow the SIVIC creative to pause player-controlled video playback
			during the ad. If `false` it will not (live streaming is a use case). An
			example use case here is a clickthru overlays, where `variableDuration`
			(ad requirement) is `false`, but
			{{EnvironmentData/variableDurationAllowed}} (publisher capability) can be
			`true` or `false`. It should not be used in any case where disallowing
			the pause interferes with the ad KPIs (for example if it can interfere
			with completions, time spent in an interactive component, etc).
		- {{EnvironmentData/skippableState}}: indicates whether the ad may be
			skippable and which party controls the skippability, must be one of the
			{{SkippableState}} enum values.
				- {{SkippableState/playerHandles}}: The player will render a skip
					button and might skip the ad.
				- {{SkippableState/adHandles}}: The ad may or may not render a skip
					button.
				- {{SkippableState/notSkippable}}: The ad cannot be skipped and the
					SIVIC creative should not render a skip button. This may be common in
					DAI for live streams.
		- {{EnvironmentData/version}}: The version of sivic that this player uses.
		- {{EnvironmentData/siteUrl}} Indicating the website the ad will play on,
			for example if the site was `www.xyz.com/videoId`, this information would
			include at least `www.xyz.com`. The player may give more information.
			Desired for reporting and troubleshooting.
		- {{EnvironmentData/appId}} The id of the app if applicable
		- {{EnvironmentData/useragent}} Data about sdks and players
		- {{EnvironmentData/deviceId}} IDFA or AAID would be used primarily for 3rd
			party tracking of custom events
		- {{EnvironmentData/muted}} (boolean): True if the audio is muted.
		- {{EnvironmentData/volume}} (number): The volume which should be between 0 and 1.0.

Issue: useragent needs some definition or a link to where how this should be populated.

#### resolve #### {#sivic-player-init-resolve}
The creative acknowledges the initialization parameters.
#### reject #### {#sivic-player-init-reject}
- reason(DOMString): An optional string error message
- errorCode(int): The code for what went wrong in initialization. See [[#error-codes]]

### SIVIC:Player:log ### {#sivic-player-log}
The player is sending a log message to the creative.

Note: If the creative is doing something out of spec and the player
will not exit with a fatal error, the player's log message should
start with "WARNING:". Creative developers should monitor for this message.

parameters:
- message(DOMString): Logging information from the player to the creative.

### SIVIC:Player:resize ### {#sivic-player-resize}

parameters:
<xmp class="idl">
dictionary ResizeParameters {
	required VideoDimensions videoDimensions;
	required CreativeDimensions creativeDimensions;
	required boolean fullScreen;
};
</xmp>
<xmp class="idl">
dictionary VideoDimensions {
	required long x;
	required long y;
	required long width;
	required long height;
};
</xmp>
<xmp class="idl">
dictionary CreativeDimensions {
	required long x;
	required long y;
	required long width;
	required long height;
};
</xmp>

The {{VideoDimensions}} communicate to the creative the dimensions of the video element.
The {{CreativeDimensions}} tell the creative where the iframe is located as well as its dimensions. If the iframe is
not yet visible (like during initialization) these dimensions will be the expected dimensions when it does become visible.

- {{VideoDimensions}}
		- {{VideoDimensions/x}} The x offset of the video. It should initialize at 0. 0 is defined as the top left corner of the player.
		- {{VideoDimensions/y}} The y offset of the video. It should initialize at 0. 0 is defined as the top left corner of the player.
		- {{VideoDimensions/width}} The width in pixels of the video.
		- {{VideoDimensions/height}} The height in pixels of the video.

- {{CreativeDimensions}}
		- {{CreativeDimensions/x}} The x offset of the creative. It should initialize at 0. 0 is defined as the top left corner of the player.
		- {{CreativeDimensions/y}} The y offset of the creative. It should initialize at 0. 0 is defined as the top left corner of the player.
		- {{CreativeDimensions/width}} The width in pixels of the creative.
		- {{CreativeDimensions/height}} The height in pixels of the creative.

- {{ResizeParameters}}
		- {{ResizeParameters/fullScreen}} `true` if fullscreen.

### SIVIC:Player:startCreative ### {#sivic-player-startCreative}

SIVIC:Player:startCreative must be called after the iframe is made visible.

#### resolve #### {#sivic-player-startCreative-resolve}
The creative acknowledges that it has started playback. The player must make the creative visible to the user.
#### reject #### {#sivic-player-startCreative-reject}
- reason(DOMString): An optional string error message
- errorCode(int): The code for what went wrong in initialization. See [[#error-codes]]

## Messages from the Creative to the Player ## {#creative-messages}
All functions should be prepended with SIVIC:Creative

### SIVIC:Creative:clickThru ### {#sivic-creative-clickThru}

The creative must handle click-thru due to the nature of cross-origin iframes. This message must only be sent in response to a user-initiated click that is considered a click-thru by the creative.

The main purpose of this message is for the player to track click-thrus. Since not every navigation is a click-thru, it should not be used for adjusting media playback status (pause, mute). If the player wants to update media playback status as a result of navigation, it should detect it via some other environment-specific method (eg. [Page Visibility API](https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API) on web and in apps).

Parameters:
- x (int): the x coordinate of the click relative to the left of the creative.
- y (int): the y coordinate of the click relative to the top of the creative.

### SIVIC:Creative:fatalError ### {#sivic-creative-fatalError}
After this message is received, the iframe should be unloaded and the video ad should stop playback if possible.
If the video ad continues to play the iframe should still be unloaded.

parameters:
- errorCode(int): reason for error. See [[#error-codes]]
- errorMessage(DOMString): Any optional additional information about the fatal error.

### SIVIC:Creative:getVideoState ### {#sivic-creative-getVideoState}
Expects a response with information about the video state.

#### resolve #### {#sivic-creative-getVideoState-resolve}
- currentSrc(DOMString): The src of which ad has been chosen. This may need correction for server side ad insertion as
	it should indicate the video media selected and not the url to the media playing.
- currentTime(number): This should be the current time from the first frame of the video ad. In the case of DAI,
	this number needs to be corrected. For example: if the video element time is 500 seconds but the ad started
	playback 10 seconds ago (in DAI), this should be 10 seconds.
- duration(number): This should be the duration of the ad. Server side ad insertion may need correction.
- ended(boolean): corresponds exactly to video element ended attribute
- muted(boolean): corresponds exactly to video element muted attribute
- paused(boolean): corresponds exactly to video element paused attribute
- volume(number): corresponds exactly to video element volume attribute
- fullscreen(boolean): true if the video element is full screen, false otherwise

Issue: should we also include video element location and size here?

### SIVIC:Creative:log ### {#sivic-creative-log}
The creative is sending a log message to the player.

Note: If the player is doing something out of spec and the creative
will not exit with a fatal error, the creatives log message should
start with "WARNING:". Player developers should monitor for this message.

parameters:
- message(DOMString): Logging information sent from the creative to the player.

### SIVIC:Creative:reportTracking ### {#sivic-creative-reportTracking}
paramaters:
- trackingUrls(Array<String>): an array or tracking pixels that the publisher should fire

The creative is not required to use SIVIC:Creative:reportTracking. However, the player
must implement SIVIC:Creative:reportTracking.

All tracking urls sent through SIVIC:Creative:reportTracking must have their
macros replaced as though they were tracking pixels specified in VAST. Then they must
be reported by the player as though they were tracking pixels.

#### resolve #### {#sivic-creative-reportTracking-resolve}
The player sends resolve if tracking has been sent out. Returning resolve on this message
should not block waiting for a response from the site.
#### reject #### {#sivic-creative-reportTracking-reject}
The player did not send the tracking pixel.

parameters:
- reason(DOMString): An optional string error message
- errorCode(int): The code for why the player did not attempt to send a tracking pixel. See [[#error-codes]]

### SIVIC:Creative:requestChangeAdDuration ### {#sivic-creative-requestChangeAdDuration}
Extension in duration should only be in response to user interaction.

paramaters:
- duration(int): The new duration of the creative. -2 indicates unknown ad duration.

#### resolve #### {#sivic-creative-requestChangeAdDuration-resolve}
The player changed the ad duration.
#### reject #### {#sivic-creative-requestChangeAdDuration-reject}
The player did not change the ad duration.

### SIVIC:Creative:requestChangeVolume ### {#sivic-creative-requestChangeVolume}
paramaters:
- volume(float): a number between 0 and 1 indicating what volume the creative wants.
- muted(boolean): True indicates the creative wants the volume muted.

#### resolve #### {#sivic-creative-requestChangeVolume-resolve}
The player has changed the volume as requested.
#### reject #### {#sivic-creative-requestChangeVolume-reject}
The player did not change to the requested volume.

### SIVIC:Creative:requestFullScreen ### {#sivic-creative-requestFullScreen}
The creative is requesting to go full screen. Not all browsers support this.

#### resolve #### {#sivic-creative-requestFullScreen-resolve}
The player has gone full screen.
#### reject #### {#sivic-creative-requestFullScreen-reject}
The player did not go full screen.

### SIVIC:Creative:requestPause ### {#sivic-creative-requestPause}
The creative wants the video element to pause media playback.

#### resolve #### {#sivic-creative-requestPause-resolve}
The player paused the video.
#### reject #### {#sivic-creative-requestPause-reject}
The player did not pause the video.

### SIVIC:Creative:requestPlay ### {#sivic-creative-requestPlay}
The creative wants the video element to resume media playback.

#### resolve #### {#sivic-creative-requestPlay-resolve}
The player is playing the video.
#### reject #### {#sivic-creative-requestPlay-reject}
The player did not play the video.

### SIVIC:Creative:requestResize ### {#sivic-creative-requestResize}

Request resize should use the {{ResizeParameters}} which are explained in [[#sivic-player-resize]]

#### resolve #### {#sivic-creative-requestResize-resolve}
The player has resized exactly as it has been requested.
#### reject #### {#sivic-creative-requestResize-reject}
The player did not resize to the exact request. If the player was only able to partially comply, it should still
reject the message. Then the player should call the message [[#sivic-player-resize]] to let the creative know
what resize happened.

### SIVIC:Creative:requestSkip ### {#sivic-creative-requestSkip}
The player should stop video playback if possible.

If the player cannot stop video playback, the player still does not unload the iframe.

#### resolve #### {#sivic-creative-requestSkip-resolve}
Upon resolving this request, the player must call [[#sivic-player-adSkipped]].

#### reject #### {#sivic-creative-requestSkip-reject}
The creative should continue to playback as though it could not be skipped.

### SIVIC:Creative:requestStop ### {#sivic-creative-requestStop}
The player should stop video playback if possible.

If the player cannot stop video playback, the player still unloads the iframe. The creative may hide all elements
in this case if it doesn't wish to be seen.

#### resolve #### {#sivic-creative-requestStop-resolve}
Upon resolving this request, the player must call [[#sivic-player-adStopped]].

#### reject #### {#sivic-creative-requestStop-reject}
For some reason the player could not stop playback. The creative may continue
to render as though it was not stopped.

# Referencing a SIVIC creative from VAST # {#api-vast}

When a SIVIC creative is referenced from a VAST document, the value for the
`apiFramework` attribute in the `InteractiveCreativeFile` element must be
`SIVIC` (all caps). This attribute identifies the SIVIC API for the creative.
Version negotiation should be handled by the [[#api-ad-loading]] algorithm
(rather than identified in the VAST file).

Another attribute of the `InteractiveCreativeFile` is `variableDuration` which
identifies whether the ad always drops when the duration is reached, or if it
can potentially extend the duration by pausing the underlying video or delaying
the `adStopped` event after `adVideoComplete`.

# Common Workflows # {#common-workflows}

## How to Handle Ad Loading ## {#api-ad-loading}

The player must follow this workflow for loading an ad.

1. The player must create an iframe element for the SIVIC creative. The player
	iframe should start out hidden. The iframe should be capable executing
	javascript and loading resources.
2. The player starts listening on the window that is the parent of the iframe
	for messages from the creative.
3. The player sets the src element of the iframe to the url provided by
	the creatives VAST InteractiveCreativeFile element. The player should
	assume this will be a cross domain iframe.
4. The player waits until the creative inializes a session.
	[[#establish-session]] The player responds with a resolve message.
	The resolve message includes the correlator that must be present in
	all messages going forward.
5. The player then calls [[#sivic-player-init]] with all relevant parameters.
	The player waits until the creative responds with resolve.  If the
	creative responds with reject, the player should immediately unload
	the creative's iframe.
6. Where possible the player should wait until both the creative has responded
	to the [[#sivic-player-init]] and the video is ready to start playing. Ready
	to start playing means the first frame will show and playback will continue.
7. When the video is started the player calls [[#sivic-player-startCreative]].
	The player must overlay the creative iframe over the video element exactly.
	The player must make the creative visible. The creative should respond to
	this message immediately with [[#sivic-player-startCreative-resolve]].

## How to Handle Ad Playback ## {#api-ad-playback}

The video player is responsible for handling playback of the video as well as
tracking video related events. The SIVIC creative on the other hand handles
playback of interactive content and internal tracking related to interactivity
(custom events, creative impression if desired (recommended)).

### Ad Pause ### {#api-ad-pause}

If the {{EnvironmentData/variableDurationAllowed}} flag is set to `true` then
the player should enable video pause by the SIVIC creative via the
SIVIC:Creative:requestPause message. The player must respond to
SIVIC:Creative:requestPause with the `AdPaused` event.

When the SIVIC creative would like to resume video playback, it should call the
SIVIC:Creative:requestPlay message. The player must
respond to SIVIC:Creative:requestPlay message with resolve and play the video.

### Ad Resizing and Fullscreen ### {#api-resizing}

Issue: can width / height coordination not be done through the iframe width
height, which would not require any API?

The player may resize the ad slot. The player must call [[#sivic-player-resize]] any time the ad slot size is changed.

If {{EnvironmentData/fullscreenAllowed}} is `true`, the SIVIC creative may
call the [[#sivic-creative-requestFullScreen]] method. The player must resize only the ad
slot to fullscreen (not the video). The SIVIC creative then will resize the
video as it sees fit. The player must call [[#sivic-player-resize]] on the SIVIC creative
with {{ResizeParameters/fullScreen}} set to `true` and {{ResizeParameters/videoDimensions}} and
{{ResizeParameters/creativeDimensions}} set to the full screen dimensions.

If player goes fullscreen on its own. Then the player must call [[#sivic-player-resize]] on the SIVIC creative
with {{ResizeParameters/fullScreen}} set to `true` and {{ResizeParameters/videoDimensions}} and
{{ResizeParameters/creativeDimensions}} set to the full screen dimensions.

Issue: should the player not also resize the video slot?

## How to Handle Ad End and Unload ## {#api-end}

Following are cases where ad can end:
1. Ad was skipped, either by player or creative (if the ad contains
	the skip button). See [[#api-skip]].
2. The creative has fired [[#sivic-creative-requestStop]] message and the player has allowed the ad to stop.
3. The player has fired [[#sivic-player-adStopped]] message and the creative resolved.
4. Ad errors out. See [[#api-error]].

### Ad Skips ### {#api-skip}

**Skip Ad Handled by Player**
1. The player calls [[#sivic-player-adSkipped]] on the ad.
2. The player hides the creative.
3. The creative may dispatch any tracking pixels via [[#sivic-creative-reportTracking]]
3. The creative may wait for [[#sivic-creative-reportTracking-resolve]]
	from the reportTracking call.
4. The creative dispatches `resolve` on the `adSkipped` message [[#sivic-player-adSkipped-resolve]].
5. The player fires any skip tracking pixels.
6. The player unloads the ad.

**Skip Ad Handled by Ad**
1. The creative dispatches [[#sivic-creative-requestSkip]].
2. The player dispatches resolves the to the `requestSkip` message.
3. The player follows all the steps in `Skip Ad Handled by Player`.

### Ad Ends Before Video Completion ### {#api-end-before-complete}

This scenario applies when the ad chooses to signal the player to kill it,
typically at the prompting of the viewer. A good example would be a survey that
allows the viewer to skip immediately to content when completed.
1. The ad cleans up and dispatches [[#sivic-creative-requestStop]].
2. The player unloads the ad.

### Ad Extends Beyond Video Completion ### {#api-extend}

This scenario is only possible when the
{{EnvironmentData/variableDurationAllowed}} flag is set to `true`. Video
duration must only be extended in response to user interaction.
1. User interacts at any point during playback of the video, triggering extended
	ad portion.
2. The Creative dispatches [[#sivic-creative-requestChangeAdDuration]] message with the new duration.
3. The ad enters its extended phase.
4. The creative dispatches [[#sivic-creative-requestStop]] when extended phase is finished.

Issue: clarify the value of the `duration` property as the current text
does not seem to make much sense

### Ad Completes at Video Completion ### {#api-complete}

When an ad finishes at the same time as its video.
1. The player calls [[#sivic-player-adStopped]] on the ad.
2. The player hides the creative.
3. The creative may dispatch any tracking pixels via
	[[#sivic-creative-reportTracking]]
4. The creative may wait for [[#sivic-creative-reportTracking-resolve]]
	from the reportTracking call.
5. The creative dispatches `resolve` on the `adSkipped` message [[#sivic-player-adStopped-resolve]].
6. The player unloads the ad.

### Ad Errors Out ### {#api-error}

The SIVIC creative or the player may terminate the ad unit with an error at any
time. If the SIVIC creative indicates an error, the player should try to stop ad
unit playback. This might not be possible in server side stitched ads.

The player may error out if the ad does not respond with
[[#sivic-player-init-resolve]] in a reasonable amount of time.

When an player errors out it must follow these steps.
1. The player calls [[#sivic-player-fatalError]] on the ad.
2. The player hides the creative.
3. The creative may dispatch any tracking pixels via
	[[#sivic-creative-reportTracking]]
4. The creative may wait for [[#sivic-creative-reportTracking-resolve]]
	from the reportTracking call.
5. The creative dispatches `resolve` on the `adSkipped` message
	[[#sivic-player-fatalError-resolve]].
6. The player unloads the ad.

### User Experience ### {#user-experience}

This specification does not define the user experience for a close control or other generic media interaction 
behavior by the ad creative or the media player. The publisher media player is in
full control over its user experience and can present its controls (or hide them) as needed.
The publisher media player may dismiss the ad creative at any point in time. The
ad creative can also request to be dismissed at any point in time. Some
implementations may have a publisher provided close control, as well as various other controls, and others may not.
Ad creatives may opt to show its own controls, including a close control. Ad creatives and
media players should ensure that consumers are presented with a good ad experience.

### Additional Notes ### {#api-notes}

The player may call [[#sivic-player-adStopped]] at any time. The creative should respond with
`resolved` after finishing its ad end logic. The player should allow 1 second
between calling [[#sivic-player-adStopped]] and receiving `resolved`. The implementer of the
player should take into consideration that dropping a SIVIC ad unit before it has
dispatched `resolved` may result in tracking discrepancies, and that calling
[[#sivic-player-adStopped]] before the ad experience has ended (which is AFTER the optional
lean-in phase) could harm the overall ad experience.

The SIVIC creative may also dispatch [[#sivic-creative-requestStop]] at any time, signaling to the
player that the ad has finished and unloaded. Any further interaction with the
SIVIC creative after `requestStop` may not result in the desired outcome. The same
is true for `fatalError`.

# Error Handling and Timeouts # {#errors}

If the media cannot be played the player should terminate the ad and fire an error using the standard VAST errors.

If either the interactive ad or player wants to terminate with an error the player should fire a 902 error. In cases where this is not possible like live server side ad insertion the player should remove the ad overlay and continue tracking quartiles and completion.

The ad or player should pass a specific error code to indicate why it errored out. The ad can also hand back a string with extra details about the error.

## Error Codes ## {#error-codes}
This table indicates defined SIVIC error codes the creative may fire:

: <dfn>1100</dfn>
:: Unspecified error. Catchall error if the creative could not find a matching error code.
		The creative should be more specific in the error message.
: <dfn>1101</dfn>
:: Resources could not be loaded. The SIVIC creative tried to load resources but failed.
: <dfn>1102</dfn>
:: Playback area not usable by creative. The dimensions the creative needed
		were not what it received.
: <dfn>1103</dfn>
:: Wrong SIVIC version. The creative could not support the players version.
: <dfn>1104</dfn>
:: Creative not playable for a technical reason on this site.
: <dfn>1105</dfn>
:: Request for expand not honored. The creative requested to expand but the
		player did not allow it.
: <dfn>1106</dfn>
:: Request for pause not honored. The creative requested pause but the player
		did not pause.
: <dfn>1107</dfn>
:: Play mode not adequate for creative. The creative requires playback control but
		the player is not giving control. This error should only fire if the
		VAST for the ad specified that it needs playback control.
: <dfn>1108</dfn>
:: Ad internal error. The creative had an error not related to any external dependencies.
: <dfn>1109</dfn>
:: Device not supported. The creative could not play or render on the device.
: <dfn>1110</dfn>
:: The player is not following the spec in the way it sends messages.
: <dfn>1111</dfn>
:: The player is not responding adequately to messages.

This table indicates defined SIVIC error codes the player may fire:

: <dfn>1200</dfn>
:: Unspecified error. Catchall error if the player could not find a matching error code.
		The player should be more specific in the error message.
: <dfn>1201</dfn>
:: Wrong SIVIC version. The player could not support the creatives version.
: <dfn>1202</dfn>
:: SIVIC creative requesting more time than the player is willing to support.
: <dfn>1203</dfn>
:: SIVIC creative requesting more functionality than the player is willing to support.
: <dfn>1204</dfn>
:: SIVIC creative is doing actions not supported on this site.
: <dfn>1205</dfn>
:: SIVIC creative is overloading the postmessage channel causing the player to terminate.
: <dfn>1206</dfn>
:: The SIVIC creatives video could not be loaded.
: <dfn>1207</dfn>
:: The video/audio media related to the SIVIC creative buffered for too long and timed out.
: <dfn>1208</dfn>
:: The SIVIC creative is taking too long to resolve or reject messages.
: <dfn>1209</dfn>
:: The SIVIC creatives media from the VAST response is not supported on this device.
: <dfn>1210</dfn>
:: The SIVIC creative is not following the spec when initializing.
: <dfn>1211</dfn>
:: The SIVIC creative is not following the spec in the way it sends messages.

# Terminology # {#terminology}

: <dfn>SIVIC VAST</dfn>
:: The VAST document that contains the SIVIC ad unit components.

: <dfn>SIVIC Ad Unit</dfn>
:: The SIVIC ad video and the SIVIC ad creative.

: <dfn>SIVIC Video</dfn>
:: The SIVIC ad video component if it's a progressively downloaded video file.

: <dfn>SIVIC Video Stream</dfn>
:: The SIVIC ad video component if it's SSAI video.

: <dfn>SIVIC Live Video Stream</dfn>
:: The SIVIC ad video component if live streaming video.

: <dfn>SIVIC Creative</dfn>
:: The SIVIC ad creative component (html doc and assets) that overlays the SIVIC
	ad video.

: <dfn>SIVIC Secondary Video</dfn>
:: Video assets that are loaded as part of the SIVIC creative and not the
	primary video.

: <dfn>Content Video</dfn>
:: Any reference to video that is NOT a component or asset of the ad unit.
